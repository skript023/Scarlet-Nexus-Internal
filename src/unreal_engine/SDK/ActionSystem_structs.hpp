#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ActionSystem

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum ActionSystem.EASSMStateType
// NumValues: 0x0004
enum class EASSMStateType : uint8
{
	Sequence                                 = 1,
	BlendSpace                               = 2,
	StateMachine                             = 3,
	EASSMStateType_MAX                       = 4,
};

// Enum ActionSystem.EAnimCommandState
// NumValues: 0x0004
enum class EAnimCommandState : uint8
{
	ACS_Failed                               = 0,
	ACS_Precede                              = 1,
	ASC_Just                                 = 2,
	EAnimCommandState_MAX                    = 3,
};

// Enum ActionSystem.EDamageState
// NumValues: 0x001F
enum class EDamageState : uint8
{
	DS_StandLightFront                       = 0,
	DS_StandLightBack                        = 1,
	DS_StandLightLeft                        = 2,
	DS_StandLightRight                       = 3,
	DS_StandMiddleFront                      = 4,
	DS_StandMiddleBack                       = 5,
	DS_StandMiddleLeft                       = 6,
	DS_StandMiddleRight                      = 7,
	DS_StandHighFront                        = 8,
	DS_StandHighBack                         = 9,
	DS_StandHighLeft                         = 10,
	DS_StandHighRight                        = 11,
	DS_SupineLight                           = 12,
	DS_SupineMiddleFront                     = 13,
	DS_SupineMiddleBack                      = 14,
	DS_SupineMiddleLeft                      = 15,
	DS_SupineMiddleRight                     = 16,
	DS_SupineHighFront                       = 17,
	DS_SupineHighBack                        = 18,
	DS_SupineHighLeft                        = 19,
	DS_SupineHighRight                       = 20,
	DS_ProneLight                            = 21,
	DS_ProneMiddleFront                      = 22,
	DS_ProneMiddleBack                       = 23,
	DS_ProneMiddleLeft                       = 24,
	DS_ProneMiddleRight                      = 25,
	DS_ProneHighFront                        = 26,
	DS_ProneHighBack                         = 27,
	DS_ProneHighLeft                         = 28,
	DS_ProneHighRight                        = 29,
	DS_MAX                                   = 30,
};

// Enum ActionSystem.EDamagePower
// NumValues: 0x0004
enum class EDamagePower : uint8
{
	Light                                    = 0,
	Middle                                   = 1,
	High                                     = 2,
	EDamagePower_MAX                         = 3,
};

// Enum ActionSystem.ETransitionRule
// NumValues: 0x0006
enum class ETransitionRule : uint8
{
	TR_PlayEnd                               = 0,
	TR_Command                               = 1,
	TR_MovementMode                          = 2,
	TR_Blueprint                             = 3,
	TR_Custom                                = 4,
	TR_MAX                                   = 5,
};

// Enum ActionSystem.EWeaponAttach
// NumValues: 0x000A
enum class EWeaponAttach : uint8
{
	WA_Right                                 = 0,
	WA_Left                                  = 1,
	WA_Custom0                               = 2,
	WA_Custom1                               = 3,
	WA_Custom2                               = 4,
	WA_Custom3                               = 5,
	WA_Custom4                               = 6,
	WA_Custom5                               = 7,
	WA_Num                                   = 8,
	WA_MAX                                   = 9,
};

// ScriptStruct ActionSystem.ASAnimNode_StateMachine
// 0x02A8 (0x02B8 - 0x0010)
struct FASAnimNode_StateMachine final : public FAnimNode_Base
{
public:
	class FString                                 NodeName;                                          // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UASStateMachine*                        StateMachine;                                      // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UASAnimationSet*                        AnimationSet;                                      // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AllStartTime;                                      // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxTransitionsPerFrame;                            // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         BlendSpaceName;                                    // 0x0040(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 BlendSpaceValue;                                   // 0x0050(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UASAnimNotify_StateChange*>      StateChangeNotifies;                               // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_70[0x248];                                     // 0x0070(0x0248)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FASAnimNode_StateMachine) == 0x000008, "Wrong alignment on FASAnimNode_StateMachine");
static_assert(sizeof(FASAnimNode_StateMachine) == 0x0002B8, "Wrong size on FASAnimNode_StateMachine");
static_assert(offsetof(FASAnimNode_StateMachine, NodeName) == 0x000010, "Member 'FASAnimNode_StateMachine::NodeName' has a wrong offset!");
static_assert(offsetof(FASAnimNode_StateMachine, StateMachine) == 0x000020, "Member 'FASAnimNode_StateMachine::StateMachine' has a wrong offset!");
static_assert(offsetof(FASAnimNode_StateMachine, AnimationSet) == 0x000028, "Member 'FASAnimNode_StateMachine::AnimationSet' has a wrong offset!");
static_assert(offsetof(FASAnimNode_StateMachine, PlayRate) == 0x000030, "Member 'FASAnimNode_StateMachine::PlayRate' has a wrong offset!");
static_assert(offsetof(FASAnimNode_StateMachine, AllStartTime) == 0x000034, "Member 'FASAnimNode_StateMachine::AllStartTime' has a wrong offset!");
static_assert(offsetof(FASAnimNode_StateMachine, MaxTransitionsPerFrame) == 0x000038, "Member 'FASAnimNode_StateMachine::MaxTransitionsPerFrame' has a wrong offset!");
static_assert(offsetof(FASAnimNode_StateMachine, BlendSpaceName) == 0x000040, "Member 'FASAnimNode_StateMachine::BlendSpaceName' has a wrong offset!");
static_assert(offsetof(FASAnimNode_StateMachine, BlendSpaceValue) == 0x000050, "Member 'FASAnimNode_StateMachine::BlendSpaceValue' has a wrong offset!");
static_assert(offsetof(FASAnimNode_StateMachine, StateChangeNotifies) == 0x000060, "Member 'FASAnimNode_StateMachine::StateChangeNotifies' has a wrong offset!");

// ScriptStruct ActionSystem.ASAnimationSetEntry
// 0x0008 (0x0008 - 0x0000)
struct FASAnimationSetEntry
{
public:
	class FName                                   EntryName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FASAnimationSetEntry) == 0x000004, "Wrong alignment on FASAnimationSetEntry");
static_assert(sizeof(FASAnimationSetEntry) == 0x000008, "Wrong size on FASAnimationSetEntry");
static_assert(offsetof(FASAnimationSetEntry, EntryName) == 0x000000, "Member 'FASAnimationSetEntry::EntryName' has a wrong offset!");

// ScriptStruct ActionSystem.ASAttackCollision
// 0x0024 (0x0024 - 0x0000)
struct FASAttackCollision final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocationOffset;                                    // 0x0008(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SphereRadius;                                      // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayTime;                                         // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LifeTime;                                          // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x4];                                       // 0x0020(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FASAttackCollision) == 0x000004, "Wrong alignment on FASAttackCollision");
static_assert(sizeof(FASAttackCollision) == 0x000024, "Wrong size on FASAttackCollision");
static_assert(offsetof(FASAttackCollision, SocketName) == 0x000000, "Member 'FASAttackCollision::SocketName' has a wrong offset!");
static_assert(offsetof(FASAttackCollision, LocationOffset) == 0x000008, "Member 'FASAttackCollision::LocationOffset' has a wrong offset!");
static_assert(offsetof(FASAttackCollision, SphereRadius) == 0x000014, "Member 'FASAttackCollision::SphereRadius' has a wrong offset!");
static_assert(offsetof(FASAttackCollision, DelayTime) == 0x000018, "Member 'FASAttackCollision::DelayTime' has a wrong offset!");
static_assert(offsetof(FASAttackCollision, LifeTime) == 0x00001C, "Member 'FASAttackCollision::LifeTime' has a wrong offset!");

// ScriptStruct ActionSystem.ASAnimationSetEntry_StateMachine
// 0x0008 (0x0010 - 0x0008)
struct FASAnimationSetEntry_StateMachine final : public FASAnimationSetEntry
{
public:
	class UASStateMachine*                        StateMachine;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FASAnimationSetEntry_StateMachine) == 0x000008, "Wrong alignment on FASAnimationSetEntry_StateMachine");
static_assert(sizeof(FASAnimationSetEntry_StateMachine) == 0x000010, "Wrong size on FASAnimationSetEntry_StateMachine");
static_assert(offsetof(FASAnimationSetEntry_StateMachine, StateMachine) == 0x000008, "Member 'FASAnimationSetEntry_StateMachine::StateMachine' has a wrong offset!");

// ScriptStruct ActionSystem.ASAnimationSetEntry_BlendSpace
// 0x0008 (0x0010 - 0x0008)
struct FASAnimationSetEntry_BlendSpace final : public FASAnimationSetEntry
{
public:
	class UBlendSpaceBase*                        BlendSpace;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FASAnimationSetEntry_BlendSpace) == 0x000008, "Wrong alignment on FASAnimationSetEntry_BlendSpace");
static_assert(sizeof(FASAnimationSetEntry_BlendSpace) == 0x000010, "Wrong size on FASAnimationSetEntry_BlendSpace");
static_assert(offsetof(FASAnimationSetEntry_BlendSpace, BlendSpace) == 0x000008, "Member 'FASAnimationSetEntry_BlendSpace::BlendSpace' has a wrong offset!");

// ScriptStruct ActionSystem.ASPlayRateSection
// 0x0008 (0x0008 - 0x0000)
struct FASPlayRateSection final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FASPlayRateSection) == 0x000004, "Wrong alignment on FASPlayRateSection");
static_assert(sizeof(FASPlayRateSection) == 0x000008, "Wrong size on FASPlayRateSection");
static_assert(offsetof(FASPlayRateSection, Time) == 0x000000, "Member 'FASPlayRateSection::Time' has a wrong offset!");
static_assert(offsetof(FASPlayRateSection, Scale) == 0x000004, "Member 'FASPlayRateSection::Scale' has a wrong offset!");

// ScriptStruct ActionSystem.ASAnimationSetEntry_Sequence
// 0x0018 (0x0020 - 0x0008)
struct FASAnimationSetEntry_Sequence final : public FASAnimationSetEntry
{
public:
	class UAnimSequenceBase*                      Sequence;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FASPlayRateSection>             PlayRate;                                          // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FASAnimationSetEntry_Sequence) == 0x000008, "Wrong alignment on FASAnimationSetEntry_Sequence");
static_assert(sizeof(FASAnimationSetEntry_Sequence) == 0x000020, "Wrong size on FASAnimationSetEntry_Sequence");
static_assert(offsetof(FASAnimationSetEntry_Sequence, Sequence) == 0x000008, "Member 'FASAnimationSetEntry_Sequence::Sequence' has a wrong offset!");
static_assert(offsetof(FASAnimationSetEntry_Sequence, PlayRate) == 0x000010, "Member 'FASAnimationSetEntry_Sequence::PlayRate' has a wrong offset!");

// ScriptStruct ActionSystem.ASAnimInstanceProxy
// 0x00A0 (0x0780 - 0x06E0)
struct FASAnimInstanceProxy final : public FAnimInstanceProxy
{
public:
	uint8                                         Pad_6E0[0xA0];                                     // 0x06E0(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FASAnimInstanceProxy) == 0x000010, "Wrong alignment on FASAnimInstanceProxy");
static_assert(sizeof(FASAnimInstanceProxy) == 0x000780, "Wrong size on FASAnimInstanceProxy");

// ScriptStruct ActionSystem.ASStateInstance
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x08) FASStateInstance
{
public:
	uint8                                         Pad_0[0x40];                                       // 0x0000(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FASStateInstance) == 0x000008, "Wrong alignment on FASStateInstance");
static_assert(sizeof(FASStateInstance) == 0x000040, "Wrong size on FASStateInstance");

// ScriptStruct ActionSystem.ASEquipWeapon
// 0x001C (0x001C - 0x0000)
struct FASEquipWeapon final
{
public:
	int32                                         InventoryId;                                       // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Scale3D;                                           // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FASEquipWeapon) == 0x000004, "Wrong alignment on FASEquipWeapon");
static_assert(sizeof(FASEquipWeapon) == 0x00001C, "Wrong size on FASEquipWeapon");
static_assert(offsetof(FASEquipWeapon, InventoryId) == 0x000000, "Member 'FASEquipWeapon::InventoryId' has a wrong offset!");
static_assert(offsetof(FASEquipWeapon, Location) == 0x000004, "Member 'FASEquipWeapon::Location' has a wrong offset!");
static_assert(offsetof(FASEquipWeapon, Scale3D) == 0x000010, "Member 'FASEquipWeapon::Scale3D' has a wrong offset!");

// ScriptStruct ActionSystem.ASTakeHitInfo
// 0x0128 (0x0128 - 0x0000)
struct FASTakeHitInfo final
{
public:
	float                                         ActualDamage;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 DamageTypeClass;                                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AASCharacter>            PawnInstigator;                                    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  DamageCauser;                                      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamageEventClassID;                                // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bKilled : 1;                                       // 0x0024(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         EnsureReplicationByte;                             // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDamageEvent                           GeneralDamageEvent;                                // 0x0030(0x0010)(NativeAccessSpecifierPrivate)
	struct FPointDamageEvent                      PointDamageEvent;                                  // 0x0040(0x00A8)(ContainsInstancedReference, NativeAccessSpecifierPrivate)
	struct FRadialDamageEvent                     RadialDamageEvent;                                 // 0x00E8(0x0040)(ContainsInstancedReference, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FASTakeHitInfo) == 0x000008, "Wrong alignment on FASTakeHitInfo");
static_assert(sizeof(FASTakeHitInfo) == 0x000128, "Wrong size on FASTakeHitInfo");
static_assert(offsetof(FASTakeHitInfo, ActualDamage) == 0x000000, "Member 'FASTakeHitInfo::ActualDamage' has a wrong offset!");
static_assert(offsetof(FASTakeHitInfo, DamageTypeClass) == 0x000008, "Member 'FASTakeHitInfo::DamageTypeClass' has a wrong offset!");
static_assert(offsetof(FASTakeHitInfo, PawnInstigator) == 0x000010, "Member 'FASTakeHitInfo::PawnInstigator' has a wrong offset!");
static_assert(offsetof(FASTakeHitInfo, DamageCauser) == 0x000018, "Member 'FASTakeHitInfo::DamageCauser' has a wrong offset!");
static_assert(offsetof(FASTakeHitInfo, DamageEventClassID) == 0x000020, "Member 'FASTakeHitInfo::DamageEventClassID' has a wrong offset!");
static_assert(offsetof(FASTakeHitInfo, EnsureReplicationByte) == 0x000028, "Member 'FASTakeHitInfo::EnsureReplicationByte' has a wrong offset!");
static_assert(offsetof(FASTakeHitInfo, GeneralDamageEvent) == 0x000030, "Member 'FASTakeHitInfo::GeneralDamageEvent' has a wrong offset!");
static_assert(offsetof(FASTakeHitInfo, PointDamageEvent) == 0x000040, "Member 'FASTakeHitInfo::PointDamageEvent' has a wrong offset!");
static_assert(offsetof(FASTakeHitInfo, RadialDamageEvent) == 0x0000E8, "Member 'FASTakeHitInfo::RadialDamageEvent' has a wrong offset!");

// ScriptStruct ActionSystem.ASDamageState
// 0x01E0 (0x01E0 - 0x0000)
struct FASDamageState final
{
public:
	class FString                                 StandLightFront;                                   // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StandLightBack;                                    // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StandLightLeft;                                    // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StandLightRight;                                   // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StandMiddleFront;                                  // 0x0040(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StandMiddleBack;                                   // 0x0050(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StandMiddleLeft;                                   // 0x0060(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StandMiddleRight;                                  // 0x0070(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StandHighFront;                                    // 0x0080(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StandHighBack;                                     // 0x0090(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StandHighLeft;                                     // 0x00A0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StandHighRight;                                    // 0x00B0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SupineLight;                                       // 0x00C0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SupineMiddleFront;                                 // 0x00D0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SupineMiddleBack;                                  // 0x00E0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SupineMiddleLeft;                                  // 0x00F0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SupineMiddleRight;                                 // 0x0100(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SupineHighFront;                                   // 0x0110(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SupineHighBack;                                    // 0x0120(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SupineHighLeft;                                    // 0x0130(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SupineHighRight;                                   // 0x0140(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProneLight;                                        // 0x0150(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProneMiddleFront;                                  // 0x0160(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProneMiddleBack;                                   // 0x0170(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProneMiddleLeft;                                   // 0x0180(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProneMiddleRight;                                  // 0x0190(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProneHighFront;                                    // 0x01A0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProneHighBack;                                     // 0x01B0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProneHighLeft;                                     // 0x01C0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProneHighRight;                                    // 0x01D0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FASDamageState) == 0x000008, "Wrong alignment on FASDamageState");
static_assert(sizeof(FASDamageState) == 0x0001E0, "Wrong size on FASDamageState");
static_assert(offsetof(FASDamageState, StandLightFront) == 0x000000, "Member 'FASDamageState::StandLightFront' has a wrong offset!");
static_assert(offsetof(FASDamageState, StandLightBack) == 0x000010, "Member 'FASDamageState::StandLightBack' has a wrong offset!");
static_assert(offsetof(FASDamageState, StandLightLeft) == 0x000020, "Member 'FASDamageState::StandLightLeft' has a wrong offset!");
static_assert(offsetof(FASDamageState, StandLightRight) == 0x000030, "Member 'FASDamageState::StandLightRight' has a wrong offset!");
static_assert(offsetof(FASDamageState, StandMiddleFront) == 0x000040, "Member 'FASDamageState::StandMiddleFront' has a wrong offset!");
static_assert(offsetof(FASDamageState, StandMiddleBack) == 0x000050, "Member 'FASDamageState::StandMiddleBack' has a wrong offset!");
static_assert(offsetof(FASDamageState, StandMiddleLeft) == 0x000060, "Member 'FASDamageState::StandMiddleLeft' has a wrong offset!");
static_assert(offsetof(FASDamageState, StandMiddleRight) == 0x000070, "Member 'FASDamageState::StandMiddleRight' has a wrong offset!");
static_assert(offsetof(FASDamageState, StandHighFront) == 0x000080, "Member 'FASDamageState::StandHighFront' has a wrong offset!");
static_assert(offsetof(FASDamageState, StandHighBack) == 0x000090, "Member 'FASDamageState::StandHighBack' has a wrong offset!");
static_assert(offsetof(FASDamageState, StandHighLeft) == 0x0000A0, "Member 'FASDamageState::StandHighLeft' has a wrong offset!");
static_assert(offsetof(FASDamageState, StandHighRight) == 0x0000B0, "Member 'FASDamageState::StandHighRight' has a wrong offset!");
static_assert(offsetof(FASDamageState, SupineLight) == 0x0000C0, "Member 'FASDamageState::SupineLight' has a wrong offset!");
static_assert(offsetof(FASDamageState, SupineMiddleFront) == 0x0000D0, "Member 'FASDamageState::SupineMiddleFront' has a wrong offset!");
static_assert(offsetof(FASDamageState, SupineMiddleBack) == 0x0000E0, "Member 'FASDamageState::SupineMiddleBack' has a wrong offset!");
static_assert(offsetof(FASDamageState, SupineMiddleLeft) == 0x0000F0, "Member 'FASDamageState::SupineMiddleLeft' has a wrong offset!");
static_assert(offsetof(FASDamageState, SupineMiddleRight) == 0x000100, "Member 'FASDamageState::SupineMiddleRight' has a wrong offset!");
static_assert(offsetof(FASDamageState, SupineHighFront) == 0x000110, "Member 'FASDamageState::SupineHighFront' has a wrong offset!");
static_assert(offsetof(FASDamageState, SupineHighBack) == 0x000120, "Member 'FASDamageState::SupineHighBack' has a wrong offset!");
static_assert(offsetof(FASDamageState, SupineHighLeft) == 0x000130, "Member 'FASDamageState::SupineHighLeft' has a wrong offset!");
static_assert(offsetof(FASDamageState, SupineHighRight) == 0x000140, "Member 'FASDamageState::SupineHighRight' has a wrong offset!");
static_assert(offsetof(FASDamageState, ProneLight) == 0x000150, "Member 'FASDamageState::ProneLight' has a wrong offset!");
static_assert(offsetof(FASDamageState, ProneMiddleFront) == 0x000160, "Member 'FASDamageState::ProneMiddleFront' has a wrong offset!");
static_assert(offsetof(FASDamageState, ProneMiddleBack) == 0x000170, "Member 'FASDamageState::ProneMiddleBack' has a wrong offset!");
static_assert(offsetof(FASDamageState, ProneMiddleLeft) == 0x000180, "Member 'FASDamageState::ProneMiddleLeft' has a wrong offset!");
static_assert(offsetof(FASDamageState, ProneMiddleRight) == 0x000190, "Member 'FASDamageState::ProneMiddleRight' has a wrong offset!");
static_assert(offsetof(FASDamageState, ProneHighFront) == 0x0001A0, "Member 'FASDamageState::ProneHighFront' has a wrong offset!");
static_assert(offsetof(FASDamageState, ProneHighBack) == 0x0001B0, "Member 'FASDamageState::ProneHighBack' has a wrong offset!");
static_assert(offsetof(FASDamageState, ProneHighLeft) == 0x0001C0, "Member 'FASDamageState::ProneHighLeft' has a wrong offset!");
static_assert(offsetof(FASDamageState, ProneHighRight) == 0x0001D0, "Member 'FASDamageState::ProneHighRight' has a wrong offset!");

// ScriptStruct ActionSystem.ASStateInstance_BlendSpace
// 0x00A0 (0x00E0 - 0x0040)
struct FASStateInstance_BlendSpace final : public FASStateInstance
{
public:
	uint8                                         Pad_40[0xA0];                                      // 0x0040(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FASStateInstance_BlendSpace) == 0x000008, "Wrong alignment on FASStateInstance_BlendSpace");
static_assert(sizeof(FASStateInstance_BlendSpace) == 0x0000E0, "Wrong size on FASStateInstance_BlendSpace");

// ScriptStruct ActionSystem.ASStateInstance_Sequence
// 0x0010 (0x0050 - 0x0040)
struct FASStateInstance_Sequence final : public FASStateInstance
{
public:
	uint8                                         Pad_40[0x10];                                      // 0x0040(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FASStateInstance_Sequence) == 0x000008, "Wrong alignment on FASStateInstance_Sequence");
static_assert(sizeof(FASStateInstance_Sequence) == 0x000050, "Wrong size on FASStateInstance_Sequence");

// ScriptStruct ActionSystem.ASStateInstance_StateMachine
// 0x0068 (0x00A8 - 0x0040)
struct FASStateInstance_StateMachine final : public FASStateInstance
{
public:
	uint8                                         Pad_40[0x68];                                      // 0x0040(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FASStateInstance_StateMachine) == 0x000008, "Wrong alignment on FASStateInstance_StateMachine");
static_assert(sizeof(FASStateInstance_StateMachine) == 0x0000A8, "Wrong size on FASStateInstance_StateMachine");

// ScriptStruct ActionSystem.ASActiveTransition
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FASActiveTransition final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FASActiveTransition) == 0x000008, "Wrong alignment on FASActiveTransition");
static_assert(sizeof(FASActiveTransition) == 0x000028, "Wrong size on FASActiveTransition");

}

