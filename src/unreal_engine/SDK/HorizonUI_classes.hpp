#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HorizonUI

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "Slate_structs.hpp"
#include "SlateCore_structs.hpp"
#include "HorizonUI_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class HorizonUI.HorizonFileSystem
// 0x0010 (0x0038 - 0x0028)
class UHorizonFileSystem final : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void DestroyInstance();
	static class UHorizonFileSystem* GetInstance();

	void CreateDirectoryRecursively(const class FString& FolderToMake);
	class UFont* LoadFont(const class FString& PackageFilePath);
	class UMaterial* LoadMaterial(const class FString& PackageFilePath);
	class UPaperFlipbook* LoadPaperFlipbook(const class FString& PackageFilePath);
	class USoundBase* LoadSound(const class FString& PackageFilePath);
	class UTexture2D* LoadTexture2D(const class FString& PackageFilePath, int32* OutWidth, int32* OutHeight);
	class UObject* LoadUAsset(const class FString& PackageFilePath);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HorizonFileSystem">();
	}
	static class UHorizonFileSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHorizonFileSystem>();
	}
};
static_assert(alignof(UHorizonFileSystem) == 0x000008, "Wrong alignment on UHorizonFileSystem");
static_assert(sizeof(UHorizonFileSystem) == 0x000038, "Wrong size on UHorizonFileSystem");

// Class HorizonUI.HorizonButton
// 0x00C8 (0x04F0 - 0x0428)
class UHorizonButton final : public UButton
{
public:
	FMulticastInlineDelegateProperty_             OnClickedDelegate;                                 // 0x0428(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPressedDelegate;                                 // 0x0438(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnReleasedDelegate;                                // 0x0448(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnHoveredDelegate;                                 // 0x0458(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnUnhoveredDelegate;                               // 0x0468(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_478[0x78];                                     // 0x0478(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnClickedButton();
	void OnHorizonButtonEvent__DelegateSignature(class UHorizonButton* Button);
	void OnHoveredButton();
	void OnPressedButton();
	void OnReleasedButton();
	void OnUnhoveredButton();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HorizonButton">();
	}
	static class UHorizonButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHorizonButton>();
	}
};
static_assert(alignof(UHorizonButton) == 0x000008, "Wrong alignment on UHorizonButton");
static_assert(sizeof(UHorizonButton) == 0x0004F0, "Wrong size on UHorizonButton");
static_assert(offsetof(UHorizonButton, OnClickedDelegate) == 0x000428, "Member 'UHorizonButton::OnClickedDelegate' has a wrong offset!");
static_assert(offsetof(UHorizonButton, OnPressedDelegate) == 0x000438, "Member 'UHorizonButton::OnPressedDelegate' has a wrong offset!");
static_assert(offsetof(UHorizonButton, OnReleasedDelegate) == 0x000448, "Member 'UHorizonButton::OnReleasedDelegate' has a wrong offset!");
static_assert(offsetof(UHorizonButton, OnHoveredDelegate) == 0x000458, "Member 'UHorizonButton::OnHoveredDelegate' has a wrong offset!");
static_assert(offsetof(UHorizonButton, OnUnhoveredDelegate) == 0x000468, "Member 'UHorizonButton::OnUnhoveredDelegate' has a wrong offset!");

// Class HorizonUI.HorizonFlipbookWidget
// 0x0028 (0x0238 - 0x0210)
class UHorizonFlipbookWidget : public UImage
{
public:
	uint8                                         Pad_210[0x8];                                      // 0x0210(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsStartTick;                                      // 0x0218(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_219[0x3];                                      // 0x0219(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumOfLoop;                                         // 0x021C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPaperFlipbook*                         PaperFlipbook;                                     // 0x0220(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_228[0x10];                                     // 0x0228(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetCurrentAnimationDuration();
	void PauseAnimation();
	void PlayAnimation();
	void ResetAnimation();
	void ResumeAnimation();
	void SetCurrentAnimationDuration(float InDuration);
	void SetFlipbook(class UPaperFlipbook* InFlipbook);
	void StopAnimation();

	bool IsEndAnimation() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HorizonFlipbookWidget">();
	}
	static class UHorizonFlipbookWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHorizonFlipbookWidget>();
	}
};
static_assert(alignof(UHorizonFlipbookWidget) == 0x000008, "Wrong alignment on UHorizonFlipbookWidget");
static_assert(sizeof(UHorizonFlipbookWidget) == 0x000238, "Wrong size on UHorizonFlipbookWidget");
static_assert(offsetof(UHorizonFlipbookWidget, bIsStartTick) == 0x000218, "Member 'UHorizonFlipbookWidget::bIsStartTick' has a wrong offset!");
static_assert(offsetof(UHorizonFlipbookWidget, NumOfLoop) == 0x00021C, "Member 'UHorizonFlipbookWidget::NumOfLoop' has a wrong offset!");
static_assert(offsetof(UHorizonFlipbookWidget, PaperFlipbook) == 0x000220, "Member 'UHorizonFlipbookWidget::PaperFlipbook' has a wrong offset!");

// Class HorizonUI.HorizonUserWidget
// 0x0000 (0x0230 - 0x0230)
class UHorizonUserWidget : public UUserWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HorizonUserWidget">();
	}
	static class UHorizonUserWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHorizonUserWidget>();
	}
};
static_assert(alignof(UHorizonUserWidget) == 0x000008, "Wrong alignment on UHorizonUserWidget");
static_assert(sizeof(UHorizonUserWidget) == 0x000230, "Wrong size on UHorizonUserWidget");

// Class HorizonUI.HorizonDesignableUserWidget
// 0x0000 (0x0230 - 0x0230)
class UHorizonDesignableUserWidget : public UHorizonUserWidget
{
public:
	void OnSynchronizeProperties();
	void SynchronizeProperties();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HorizonDesignableUserWidget">();
	}
	static class UHorizonDesignableUserWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHorizonDesignableUserWidget>();
	}
};
static_assert(alignof(UHorizonDesignableUserWidget) == 0x000008, "Wrong alignment on UHorizonDesignableUserWidget");
static_assert(sizeof(UHorizonDesignableUserWidget) == 0x000230, "Wrong size on UHorizonDesignableUserWidget");

// Class HorizonUI.HorizonButtonUserWidget
// 0x01D8 (0x0408 - 0x0230)
class UHorizonButtonUserWidget final : public UHorizonDesignableUserWidget
{
public:
	FMulticastInlineDelegateProperty_             OnButtonClickedDelegate;                           // 0x0230(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnButtonPressedDelegate;                           // 0x0240(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnButtonReleasedDelegate;                          // 0x0250(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnButtonHoveredDelegate;                           // 0x0260(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnButtonUnhoveredDelegate;                         // 0x0270(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnButtonFocusDelegate;                             // 0x0280(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnButtonFocusLostDelegate;                         // 0x0290(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A0[0xA8];                                     // 0x02A0(0x00A8)(Fixing Size After Last Property [ Dumper-7 ])
	class UButton*                                Button_Main;                                       // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             TextBlock_Main;                                    // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 Image_Main;                                        // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Text_Main;                                         // 0x0360(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            SlateBrush_ImageMain;                              // 0x0378(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bFocusOnHovered;                                   // 0x0400(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bButtonFocused;                                    // 0x0401(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_402[0x6];                                      // 0x0402(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void NativeOnButtonClicked();
	void NativeOnButtonHovered();
	void NativeOnButtonPressed();
	void NativeOnButtonReleased();
	void NativeOnButtonUnhovered();
	void OnHorizonButtonEvent__DelegateSignature(class UHorizonButtonUserWidget* InButton);
	void OnHorizonButtonFocusEvent__DelegateSignature(class UHorizonButtonUserWidget* InButton, const struct FFocusEvent& InFocusEvent);
	void ReceiveOnButtonClicked();
	void ReceiveOnButtonFocus(const struct FFocusEvent& InFocusEvent);
	void ReceiveOnButtonHovered();
	void ReceiveOnButtonPressed();
	void ReceiveOnButtonReleased();
	void ReceiveOnButtonUnhovered();
	void ReceiveOnOnButtonFocusLost(const struct FFocusEvent& InFocusEvent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HorizonButtonUserWidget">();
	}
	static class UHorizonButtonUserWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHorizonButtonUserWidget>();
	}
};
static_assert(alignof(UHorizonButtonUserWidget) == 0x000008, "Wrong alignment on UHorizonButtonUserWidget");
static_assert(sizeof(UHorizonButtonUserWidget) == 0x000408, "Wrong size on UHorizonButtonUserWidget");
static_assert(offsetof(UHorizonButtonUserWidget, OnButtonClickedDelegate) == 0x000230, "Member 'UHorizonButtonUserWidget::OnButtonClickedDelegate' has a wrong offset!");
static_assert(offsetof(UHorizonButtonUserWidget, OnButtonPressedDelegate) == 0x000240, "Member 'UHorizonButtonUserWidget::OnButtonPressedDelegate' has a wrong offset!");
static_assert(offsetof(UHorizonButtonUserWidget, OnButtonReleasedDelegate) == 0x000250, "Member 'UHorizonButtonUserWidget::OnButtonReleasedDelegate' has a wrong offset!");
static_assert(offsetof(UHorizonButtonUserWidget, OnButtonHoveredDelegate) == 0x000260, "Member 'UHorizonButtonUserWidget::OnButtonHoveredDelegate' has a wrong offset!");
static_assert(offsetof(UHorizonButtonUserWidget, OnButtonUnhoveredDelegate) == 0x000270, "Member 'UHorizonButtonUserWidget::OnButtonUnhoveredDelegate' has a wrong offset!");
static_assert(offsetof(UHorizonButtonUserWidget, OnButtonFocusDelegate) == 0x000280, "Member 'UHorizonButtonUserWidget::OnButtonFocusDelegate' has a wrong offset!");
static_assert(offsetof(UHorizonButtonUserWidget, OnButtonFocusLostDelegate) == 0x000290, "Member 'UHorizonButtonUserWidget::OnButtonFocusLostDelegate' has a wrong offset!");
static_assert(offsetof(UHorizonButtonUserWidget, Button_Main) == 0x000348, "Member 'UHorizonButtonUserWidget::Button_Main' has a wrong offset!");
static_assert(offsetof(UHorizonButtonUserWidget, TextBlock_Main) == 0x000350, "Member 'UHorizonButtonUserWidget::TextBlock_Main' has a wrong offset!");
static_assert(offsetof(UHorizonButtonUserWidget, Image_Main) == 0x000358, "Member 'UHorizonButtonUserWidget::Image_Main' has a wrong offset!");
static_assert(offsetof(UHorizonButtonUserWidget, Text_Main) == 0x000360, "Member 'UHorizonButtonUserWidget::Text_Main' has a wrong offset!");
static_assert(offsetof(UHorizonButtonUserWidget, SlateBrush_ImageMain) == 0x000378, "Member 'UHorizonButtonUserWidget::SlateBrush_ImageMain' has a wrong offset!");
static_assert(offsetof(UHorizonButtonUserWidget, bFocusOnHovered) == 0x000400, "Member 'UHorizonButtonUserWidget::bFocusOnHovered' has a wrong offset!");
static_assert(offsetof(UHorizonButtonUserWidget, bButtonFocused) == 0x000401, "Member 'UHorizonButtonUserWidget::bButtonFocused' has a wrong offset!");

// Class HorizonUI.HorizonDialogueMsgTextBlock
// 0x0370 (0x04A0 - 0x0130)
class UHorizonDialogueMsgTextBlock final : public UCanvasPanel
{
public:
	uint8                                         Pad_130[0x8];                                      // 0x0130(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnHypertextClickedDelegate;                        // 0x0138(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_148[0x18];                                     // 0x0148(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnHypertextPressedDelegate;                        // 0x0160(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_170[0x18];                                     // 0x0170(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnHypertextReleasedDelegate;                       // 0x0188(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_198[0x18];                                     // 0x0198(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnHypertextHoveredDelegate;                        // 0x01B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C0[0x18];                                     // 0x01C0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnHypertextUnhoveredDelegate;                      // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E8[0x18];                                     // 0x01E8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnDialogueMsgLoopFunction;                         // 0x0200(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_210[0x18];                                     // 0x0210(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnDialogueMsgCompleteFunction;                     // 0x0228(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_238[0x18];                                     // 0x0238(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnSetDialoguePageFunction;                         // 0x0250(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_260[0x18];                                     // 0x0260(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnDialoguePageEndFunction;                         // 0x0278(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_288[0x18];                                     // 0x0288(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnRebuildDialogueDelegate;                         // 0x02A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B0[0x18];                                     // 0x02B0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnCustomEventDelegate;                             // 0x02C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D8[0x18];                                     // 0x02D8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnCharAdvancedDelegate;                            // 0x02F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_300[0x18];                                     // 0x0300(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Text;                                              // 0x0318(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	EHorizonDialogueTextOverflowWarpMethod        TextOverFlowWarpMethod;                            // 0x0330(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_331[0x3];                                      // 0x0331(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DialogueMsgSpeed;                                  // 0x0334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsStartTickDialogueMsg;                           // 0x0338(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRepeatDialogueMsg;                              // 0x0339(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33A[0x2];                                      // 0x033A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RepeatDialogueMsgInterval;                         // 0x033C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDialogueMsgText;                                // 0x0340(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAutoNextDialogueMsgPage;                        // 0x0341(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_342[0x2];                                      // 0x0342(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AutoNextDialogueMsgPageIntervalRate;               // 0x0344(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoNextDialogueMsgPageIntervalMin;                // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoNextDialogueMsgPageIntervalMax;                // 0x034C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreTimeDilation;                               // 0x0350(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_351[0x3];                                      // 0x0351(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CustomTimeDilation;                                // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UHorizonDialogueStyleInfo>> StyleInfoClassList;                                // 0x0358(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FHorizonDialogueSegmentInfoStyle> SegmentStyleList;                                  // 0x0368(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRichText;                                       // 0x0378(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_379[0x7];                                      // 0x0379(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            ColorAndOpacity;                                   // 0x0380(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         Font;                                              // 0x03A8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ShadowOffset;                                      // 0x03F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ShadowColorAndOpacity;                             // 0x0400(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextJustify                                  Justification;                                     // 0x0410(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_411[0x3];                                      // 0x0411(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                LineMargin;                                        // 0x0414(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         Pad_424[0x4];                                      // 0x0424(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UHorizonButton>             DefaultButtonStyleWidgetClass;                     // 0x0428(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_430[0x50];                                     // 0x0430(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UHorizonDialogueStyleInfo*>      StyleInfoList;                                     // 0x0480(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_490[0x10];                                     // 0x0490(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 GetCurrentPageIndex();
	int32 GetCurrentPageTextLength();
	class FText GetPageTextByIndex(int32 PageIndex);
	int32 GetTextLength();
	bool IsDialogueMsgCompleted();
	bool IsDialogueMsgPageEnd();
	void NextDialogueMsgPage();
	void OnHorizonDialogueCharAdvancedEvent__DelegateSignature(const struct FHorizonDialogueBlockInfo& InCurrentBlockInfo);
	void OnHorizonDialogueCustomEvent__DelegateSignature(const class FString& InEventName, const struct FHorizonDialogueSegmentInfo& InSegInfo);
	void OnHorizonDialogueMsgEvent__DelegateSignature();
	void OnHorizonDialoguePageEvent__DelegateSignature(const struct FHorizonDialogueDialoguePageResult& InResult);
	void OnHorizonHypertextEvent__DelegateSignature(const struct FHorizonDialogueHypertextResult& InResult);
	void PauseDialogue();
	void RequestRebuildDialogue();
	void ResumeDialogue();
	void SetAutoNextDialogueMsgPageIntervalRate(float InAutoNextDialogueMsgPageIntervalRate);
	void SetColorAndOpacity(const struct FSlateColor& InColorAndOpacity);
	void SetDialogueMsgPage(int32 InPageIndex);
	void SetFont(const struct FSlateFontInfo& InFontInfo);
	void SetFontSize(int32 FontSize);
	void SetIsAutoNextDialogueMsgPage(bool B);
	void SetIsDialogueMsgText(bool B);
	void SetIsRepeatDialogueMsg(bool B);
	void SetIsStartTickDialogueMsg(bool B);
	void SetJustification(ETextJustify InJustification);
	void SetOpacity(float InOpacity);
	void SetShadowColorAndOpacity(const struct FLinearColor& InShadowColorAndOpacity);
	void SetShadowOffset(const struct FVector2D& InShadowOffset);
	void SetTextAndRebuildDialogue(const class FText& InText);
	void SkipCurrentDialogueMsgPageTick();
	void SkipCurrentDialoguePage();
	void SkipDialogue();
	void StartDialogue();
	void StopDialogue();

	ETextJustify GetJustification() const;
	class FText GetText() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HorizonDialogueMsgTextBlock">();
	}
	static class UHorizonDialogueMsgTextBlock* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHorizonDialogueMsgTextBlock>();
	}
};
static_assert(alignof(UHorizonDialogueMsgTextBlock) == 0x000008, "Wrong alignment on UHorizonDialogueMsgTextBlock");
static_assert(sizeof(UHorizonDialogueMsgTextBlock) == 0x0004A0, "Wrong size on UHorizonDialogueMsgTextBlock");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, OnHypertextClickedDelegate) == 0x000138, "Member 'UHorizonDialogueMsgTextBlock::OnHypertextClickedDelegate' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, OnHypertextPressedDelegate) == 0x000160, "Member 'UHorizonDialogueMsgTextBlock::OnHypertextPressedDelegate' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, OnHypertextReleasedDelegate) == 0x000188, "Member 'UHorizonDialogueMsgTextBlock::OnHypertextReleasedDelegate' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, OnHypertextHoveredDelegate) == 0x0001B0, "Member 'UHorizonDialogueMsgTextBlock::OnHypertextHoveredDelegate' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, OnHypertextUnhoveredDelegate) == 0x0001D8, "Member 'UHorizonDialogueMsgTextBlock::OnHypertextUnhoveredDelegate' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, OnDialogueMsgLoopFunction) == 0x000200, "Member 'UHorizonDialogueMsgTextBlock::OnDialogueMsgLoopFunction' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, OnDialogueMsgCompleteFunction) == 0x000228, "Member 'UHorizonDialogueMsgTextBlock::OnDialogueMsgCompleteFunction' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, OnSetDialoguePageFunction) == 0x000250, "Member 'UHorizonDialogueMsgTextBlock::OnSetDialoguePageFunction' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, OnDialoguePageEndFunction) == 0x000278, "Member 'UHorizonDialogueMsgTextBlock::OnDialoguePageEndFunction' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, OnRebuildDialogueDelegate) == 0x0002A0, "Member 'UHorizonDialogueMsgTextBlock::OnRebuildDialogueDelegate' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, OnCustomEventDelegate) == 0x0002C8, "Member 'UHorizonDialogueMsgTextBlock::OnCustomEventDelegate' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, OnCharAdvancedDelegate) == 0x0002F0, "Member 'UHorizonDialogueMsgTextBlock::OnCharAdvancedDelegate' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, Text) == 0x000318, "Member 'UHorizonDialogueMsgTextBlock::Text' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, TextOverFlowWarpMethod) == 0x000330, "Member 'UHorizonDialogueMsgTextBlock::TextOverFlowWarpMethod' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, DialogueMsgSpeed) == 0x000334, "Member 'UHorizonDialogueMsgTextBlock::DialogueMsgSpeed' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, bIsStartTickDialogueMsg) == 0x000338, "Member 'UHorizonDialogueMsgTextBlock::bIsStartTickDialogueMsg' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, bIsRepeatDialogueMsg) == 0x000339, "Member 'UHorizonDialogueMsgTextBlock::bIsRepeatDialogueMsg' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, RepeatDialogueMsgInterval) == 0x00033C, "Member 'UHorizonDialogueMsgTextBlock::RepeatDialogueMsgInterval' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, bIsDialogueMsgText) == 0x000340, "Member 'UHorizonDialogueMsgTextBlock::bIsDialogueMsgText' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, bIsAutoNextDialogueMsgPage) == 0x000341, "Member 'UHorizonDialogueMsgTextBlock::bIsAutoNextDialogueMsgPage' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, AutoNextDialogueMsgPageIntervalRate) == 0x000344, "Member 'UHorizonDialogueMsgTextBlock::AutoNextDialogueMsgPageIntervalRate' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, AutoNextDialogueMsgPageIntervalMin) == 0x000348, "Member 'UHorizonDialogueMsgTextBlock::AutoNextDialogueMsgPageIntervalMin' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, AutoNextDialogueMsgPageIntervalMax) == 0x00034C, "Member 'UHorizonDialogueMsgTextBlock::AutoNextDialogueMsgPageIntervalMax' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, bIgnoreTimeDilation) == 0x000350, "Member 'UHorizonDialogueMsgTextBlock::bIgnoreTimeDilation' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, CustomTimeDilation) == 0x000354, "Member 'UHorizonDialogueMsgTextBlock::CustomTimeDilation' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, StyleInfoClassList) == 0x000358, "Member 'UHorizonDialogueMsgTextBlock::StyleInfoClassList' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, SegmentStyleList) == 0x000368, "Member 'UHorizonDialogueMsgTextBlock::SegmentStyleList' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, bIsRichText) == 0x000378, "Member 'UHorizonDialogueMsgTextBlock::bIsRichText' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, ColorAndOpacity) == 0x000380, "Member 'UHorizonDialogueMsgTextBlock::ColorAndOpacity' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, Font) == 0x0003A8, "Member 'UHorizonDialogueMsgTextBlock::Font' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, ShadowOffset) == 0x0003F8, "Member 'UHorizonDialogueMsgTextBlock::ShadowOffset' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, ShadowColorAndOpacity) == 0x000400, "Member 'UHorizonDialogueMsgTextBlock::ShadowColorAndOpacity' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, Justification) == 0x000410, "Member 'UHorizonDialogueMsgTextBlock::Justification' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, LineMargin) == 0x000414, "Member 'UHorizonDialogueMsgTextBlock::LineMargin' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, DefaultButtonStyleWidgetClass) == 0x000428, "Member 'UHorizonDialogueMsgTextBlock::DefaultButtonStyleWidgetClass' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, StyleInfoList) == 0x000480, "Member 'UHorizonDialogueMsgTextBlock::StyleInfoList' has a wrong offset!");

// Class HorizonUI.HorizonDialogueStyleInfo
// 0x0010 (0x0038 - 0x0028)
class UHorizonDialogueStyleInfo final : public UObject
{
public:
	TArray<struct FHorizonDialogueSegmentInfoStyle> SegmentStyleList;                                  // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HorizonDialogueStyleInfo">();
	}
	static class UHorizonDialogueStyleInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHorizonDialogueStyleInfo>();
	}
};
static_assert(alignof(UHorizonDialogueStyleInfo) == 0x000008, "Wrong alignment on UHorizonDialogueStyleInfo");
static_assert(sizeof(UHorizonDialogueStyleInfo) == 0x000038, "Wrong size on UHorizonDialogueStyleInfo");
static_assert(offsetof(UHorizonDialogueStyleInfo, SegmentStyleList) == 0x000028, "Member 'UHorizonDialogueStyleInfo::SegmentStyleList' has a wrong offset!");

// Class HorizonUI.HorizonImage
// 0x0018 (0x0228 - 0x0210)
class UHorizonImage final : public UImage
{
public:
	struct FBox2D                                 UVRegion;                                          // 0x0210(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_224[0x4];                                      // 0x0224(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HorizonImage">();
	}
	static class UHorizonImage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHorizonImage>();
	}
};
static_assert(alignof(UHorizonImage) == 0x000008, "Wrong alignment on UHorizonImage");
static_assert(sizeof(UHorizonImage) == 0x000228, "Wrong size on UHorizonImage");
static_assert(offsetof(UHorizonImage, UVRegion) == 0x000210, "Member 'UHorizonImage::UVRegion' has a wrong offset!");

// Class HorizonUI.HorizonRadioButtonUserWidget
// 0x0078 (0x02A8 - 0x0230)
class UHorizonRadioButtonUserWidget final : public UHorizonDesignableUserWidget
{
public:
	FMulticastInlineDelegateProperty_             OnCheckedDelegate;                                 // 0x0230(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnUnCheckedDelegate;                               // 0x0240(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_250[0x30];                                     // 0x0250(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class UCheckBox*                              CheckBox_Main;                                     // 0x0280(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             TextBlock_Main;                                    // 0x0288(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Text_Main;                                         // 0x0290(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	void NativeOnCheckStateChanged(bool bIsChecked);
	void OnHorizonRadioButtonEvent__DelegateSignature();
	void SetChecked();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HorizonRadioButtonUserWidget">();
	}
	static class UHorizonRadioButtonUserWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHorizonRadioButtonUserWidget>();
	}
};
static_assert(alignof(UHorizonRadioButtonUserWidget) == 0x000008, "Wrong alignment on UHorizonRadioButtonUserWidget");
static_assert(sizeof(UHorizonRadioButtonUserWidget) == 0x0002A8, "Wrong size on UHorizonRadioButtonUserWidget");
static_assert(offsetof(UHorizonRadioButtonUserWidget, OnCheckedDelegate) == 0x000230, "Member 'UHorizonRadioButtonUserWidget::OnCheckedDelegate' has a wrong offset!");
static_assert(offsetof(UHorizonRadioButtonUserWidget, OnUnCheckedDelegate) == 0x000240, "Member 'UHorizonRadioButtonUserWidget::OnUnCheckedDelegate' has a wrong offset!");
static_assert(offsetof(UHorizonRadioButtonUserWidget, CheckBox_Main) == 0x000280, "Member 'UHorizonRadioButtonUserWidget::CheckBox_Main' has a wrong offset!");
static_assert(offsetof(UHorizonRadioButtonUserWidget, TextBlock_Main) == 0x000288, "Member 'UHorizonRadioButtonUserWidget::TextBlock_Main' has a wrong offset!");
static_assert(offsetof(UHorizonRadioButtonUserWidget, Text_Main) == 0x000290, "Member 'UHorizonRadioButtonUserWidget::Text_Main' has a wrong offset!");

// Class HorizonUI.HorizonTextBlock
// 0x0000 (0x02A0 - 0x02A0)
class UHorizonTextBlock final : public UTextBlock
{
public:
	ETextJustify GetJustification() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HorizonTextBlock">();
	}
	static class UHorizonTextBlock* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHorizonTextBlock>();
	}
};
static_assert(alignof(UHorizonTextBlock) == 0x000008, "Wrong alignment on UHorizonTextBlock");
static_assert(sizeof(UHorizonTextBlock) == 0x0002A0, "Wrong size on UHorizonTextBlock");

// Class HorizonUI.HorizonWidgetFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UHorizonWidgetFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static EHorizonUIInputMode GetInputMode(const class APlayerController* InPC);
	static class UCanvasPanelSlot* GetParentCanvasPanelSlot(class UWidget* PWidget);
	static int32 GetUserIndex(class UWidget* InWidget);
	static class UWidgetAnimation* GetUserWidgetAnimation(class UUserWidget* PUserWidget, const class FName& AnimeName);
	static class UWidget* GetWidgetFromNameRecursively(class UUserWidget* PUserWidget, const class FName& InWidgetName);
	static class UWidget* SetWidgetVisibility(class UUserWidget* UserWidget, class FName WidgetName, ESlateVisibility EVisiblity);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HorizonWidgetFunctionLibrary">();
	}
	static class UHorizonWidgetFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHorizonWidgetFunctionLibrary>();
	}
};
static_assert(alignof(UHorizonWidgetFunctionLibrary) == 0x000008, "Wrong alignment on UHorizonWidgetFunctionLibrary");
static_assert(sizeof(UHorizonWidgetFunctionLibrary) == 0x000028, "Wrong size on UHorizonWidgetFunctionLibrary");

}

