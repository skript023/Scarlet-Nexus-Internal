#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: REDAnimationNode

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// ScriptStruct REDAnimationNode.AnimNode_AnimDynamicsRedCustom
// 0x0258 (0x0320 - 0x00C8)
struct alignas(0x10) FAnimNode_AnimDynamicsRedCustom final : public FAnimNode_SkeletalControlBase
{
public:
	float                                         IdlingSeconds;                                     // 0x00C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinearDampingOverride;                             // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularDampingOverride;                            // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x6C];                                      // 0x00D4(0x006C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         RelativeSpaceBone;                                 // 0x0140(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         BoundBone;                                         // 0x0150(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         ChainEnd;                                          // 0x0160(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                BoxExtents;                                        // 0x0170(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocalJointOffset;                                  // 0x017C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GravityScale;                                      // 0x0188(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                GravityOverride;                                   // 0x018C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinearSpringConstant;                              // 0x0198(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularSpringConstant;                             // 0x019C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindScale;                                         // 0x01A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ComponentLinearAccScale;                           // 0x01A4(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ComponentLinearVelScale;                           // 0x01B0(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ComponentAppliedLinearAccClamp;                    // 0x01BC(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularBiasOverride;                               // 0x01C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumSolverIterationsPreUpdate;                      // 0x01CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumSolverIterationsPostUpdate;                     // 0x01D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAnimPhysConstraintSetup               ConstraintSetup;                                   // 0x01D4(0x0048)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_21C[0x4];                                      // 0x021C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAnimPhysSphericalLimit>        SphericalLimits;                                   // 0x0220(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SphereCollisionRadius;                             // 0x0230(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ExternalForce;                                     // 0x0234(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAnimPhysPlanarLimit>           PlanarLimits;                                      // 0x0240(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimPhysCollisionType                        CollisionType;                                     // 0x0250(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimPhysSimSpaceType                         SimulationSpace;                                   // 0x0251(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_252[0x2];                                      // 0x0252(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bUseSphericalLimits : 1;                           // 0x0254(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUsePlanarLimit : 1;                               // 0x0254(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDoUpdate : 1;                                     // 0x0254(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDoEval : 1;                                       // 0x0254(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverrideLinearDamping : 1;                        // 0x0254(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverrideAngularBias : 1;                          // 0x0254(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverrideAngularDamping : 1;                       // 0x0254(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableWind : 1;                                   // 0x0254(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_255_0 : 1;                                  // 0x0255(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bUseGravityOverride : 1;                           // 0x0255(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bLinearSpring : 1;                                 // 0x0255(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAngularSpring : 1;                                // 0x0255(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bChain : 1;                                        // 0x0255(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_256[0xCA];                                     // 0x0256(0x00CA)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_AnimDynamicsRedCustom) == 0x000010, "Wrong alignment on FAnimNode_AnimDynamicsRedCustom");
static_assert(sizeof(FAnimNode_AnimDynamicsRedCustom) == 0x000320, "Wrong size on FAnimNode_AnimDynamicsRedCustom");
static_assert(offsetof(FAnimNode_AnimDynamicsRedCustom, IdlingSeconds) == 0x0000C8, "Member 'FAnimNode_AnimDynamicsRedCustom::IdlingSeconds' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamicsRedCustom, LinearDampingOverride) == 0x0000CC, "Member 'FAnimNode_AnimDynamicsRedCustom::LinearDampingOverride' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamicsRedCustom, AngularDampingOverride) == 0x0000D0, "Member 'FAnimNode_AnimDynamicsRedCustom::AngularDampingOverride' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamicsRedCustom, RelativeSpaceBone) == 0x000140, "Member 'FAnimNode_AnimDynamicsRedCustom::RelativeSpaceBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamicsRedCustom, BoundBone) == 0x000150, "Member 'FAnimNode_AnimDynamicsRedCustom::BoundBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamicsRedCustom, ChainEnd) == 0x000160, "Member 'FAnimNode_AnimDynamicsRedCustom::ChainEnd' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamicsRedCustom, BoxExtents) == 0x000170, "Member 'FAnimNode_AnimDynamicsRedCustom::BoxExtents' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamicsRedCustom, LocalJointOffset) == 0x00017C, "Member 'FAnimNode_AnimDynamicsRedCustom::LocalJointOffset' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamicsRedCustom, GravityScale) == 0x000188, "Member 'FAnimNode_AnimDynamicsRedCustom::GravityScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamicsRedCustom, GravityOverride) == 0x00018C, "Member 'FAnimNode_AnimDynamicsRedCustom::GravityOverride' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamicsRedCustom, LinearSpringConstant) == 0x000198, "Member 'FAnimNode_AnimDynamicsRedCustom::LinearSpringConstant' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamicsRedCustom, AngularSpringConstant) == 0x00019C, "Member 'FAnimNode_AnimDynamicsRedCustom::AngularSpringConstant' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamicsRedCustom, WindScale) == 0x0001A0, "Member 'FAnimNode_AnimDynamicsRedCustom::WindScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamicsRedCustom, ComponentLinearAccScale) == 0x0001A4, "Member 'FAnimNode_AnimDynamicsRedCustom::ComponentLinearAccScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamicsRedCustom, ComponentLinearVelScale) == 0x0001B0, "Member 'FAnimNode_AnimDynamicsRedCustom::ComponentLinearVelScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamicsRedCustom, ComponentAppliedLinearAccClamp) == 0x0001BC, "Member 'FAnimNode_AnimDynamicsRedCustom::ComponentAppliedLinearAccClamp' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamicsRedCustom, AngularBiasOverride) == 0x0001C8, "Member 'FAnimNode_AnimDynamicsRedCustom::AngularBiasOverride' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamicsRedCustom, NumSolverIterationsPreUpdate) == 0x0001CC, "Member 'FAnimNode_AnimDynamicsRedCustom::NumSolverIterationsPreUpdate' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamicsRedCustom, NumSolverIterationsPostUpdate) == 0x0001D0, "Member 'FAnimNode_AnimDynamicsRedCustom::NumSolverIterationsPostUpdate' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamicsRedCustom, ConstraintSetup) == 0x0001D4, "Member 'FAnimNode_AnimDynamicsRedCustom::ConstraintSetup' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamicsRedCustom, SphericalLimits) == 0x000220, "Member 'FAnimNode_AnimDynamicsRedCustom::SphericalLimits' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamicsRedCustom, SphereCollisionRadius) == 0x000230, "Member 'FAnimNode_AnimDynamicsRedCustom::SphereCollisionRadius' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamicsRedCustom, ExternalForce) == 0x000234, "Member 'FAnimNode_AnimDynamicsRedCustom::ExternalForce' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamicsRedCustom, PlanarLimits) == 0x000240, "Member 'FAnimNode_AnimDynamicsRedCustom::PlanarLimits' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamicsRedCustom, CollisionType) == 0x000250, "Member 'FAnimNode_AnimDynamicsRedCustom::CollisionType' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamicsRedCustom, SimulationSpace) == 0x000251, "Member 'FAnimNode_AnimDynamicsRedCustom::SimulationSpace' has a wrong offset!");

// ScriptStruct REDAnimationNode.AnimNode_RigidBodyRedCustomInterpolateInfo
// 0x0018 (0x0018 - 0x0000)
struct FAnimNode_RigidBodyRedCustomInterpolateInfo final
{
public:
	class UPhysicsAsset*                          InterpolatePhysicsAssetA;                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicsAsset*                          InterpolatePhysicsAssetB;                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OverrideBodyDamping;                               // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OverrideBodyMass;                                  // 0x0015(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_RigidBodyRedCustomInterpolateInfo) == 0x000008, "Wrong alignment on FAnimNode_RigidBodyRedCustomInterpolateInfo");
static_assert(sizeof(FAnimNode_RigidBodyRedCustomInterpolateInfo) == 0x000018, "Wrong size on FAnimNode_RigidBodyRedCustomInterpolateInfo");
static_assert(offsetof(FAnimNode_RigidBodyRedCustomInterpolateInfo, InterpolatePhysicsAssetA) == 0x000000, "Member 'FAnimNode_RigidBodyRedCustomInterpolateInfo::InterpolatePhysicsAssetA' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyRedCustomInterpolateInfo, InterpolatePhysicsAssetB) == 0x000008, "Member 'FAnimNode_RigidBodyRedCustomInterpolateInfo::InterpolatePhysicsAssetB' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyRedCustomInterpolateInfo, Alpha) == 0x000010, "Member 'FAnimNode_RigidBodyRedCustomInterpolateInfo::Alpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyRedCustomInterpolateInfo, OverrideBodyDamping) == 0x000014, "Member 'FAnimNode_RigidBodyRedCustomInterpolateInfo::OverrideBodyDamping' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyRedCustomInterpolateInfo, OverrideBodyMass) == 0x000015, "Member 'FAnimNode_RigidBodyRedCustomInterpolateInfo::OverrideBodyMass' has a wrong offset!");

// ScriptStruct REDAnimationNode.AnimNode_RigidBodyRedCustom
// 0x0548 (0x0610 - 0x00C8)
struct alignas(0x10) FAnimNode_RigidBodyRedCustom final : public FAnimNode_SkeletalControlBase
{
public:
	class UPhysicsAsset*                          OverridePhysicsAsset;                              // 0x00C8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D0[0x98];                                      // 0x00D0(0x0098)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OverrideWorldGravity;                              // 0x0168(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ExternalForce;                                     // 0x0174(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ComponentLinearAccScale;                           // 0x0180(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ComponentLinearVelScale;                           // 0x018C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ComponentAppliedLinearAccClamp;                    // 0x0198(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CachedBoundsScale;                                 // 0x01A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoneReference                         BaseBoneRef;                                       // 0x01A8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	ECollisionChannel                             OverlapChannel;                                    // 0x01B8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESimulationSpace                              SimulationSpace;                                   // 0x01B9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceDisableCollisionBetweenConstraintBodies;     // 0x01BA(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BB[0x1];                                      // 0x01BB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bEnableWorldGeometry : 1;                          // 0x01BC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverrideWorldGravity : 1;                         // 0x01BC(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bTransferBoneVelocities : 1;                       // 0x01BC(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFreezeIncomingPoseOnStart : 1;                    // 0x01BC(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bClampLinearTranslationLimitToRefPose : 1;         // 0x01BC(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1BD[0x3];                                      // 0x01BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeltaSecondsScale;                                 // 0x01C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SimulationSecondsMax;                              // 0x01C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IdlingSeconds;                                     // 0x01C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LimitSimulationTranslate;                          // 0x01CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FrameSplitTranslate;                               // 0x01D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLengthLock;                                       // 0x01D4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D5[0x3];                                      // 0x01D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimNode_RigidBodyRedCustomInterpolateInfo InterpolateInfo;                                   // 0x01D8(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F0[0x420];                                    // 0x01F0(0x0420)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_RigidBodyRedCustom) == 0x000010, "Wrong alignment on FAnimNode_RigidBodyRedCustom");
static_assert(sizeof(FAnimNode_RigidBodyRedCustom) == 0x000610, "Wrong size on FAnimNode_RigidBodyRedCustom");
static_assert(offsetof(FAnimNode_RigidBodyRedCustom, OverridePhysicsAsset) == 0x0000C8, "Member 'FAnimNode_RigidBodyRedCustom::OverridePhysicsAsset' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyRedCustom, OverrideWorldGravity) == 0x000168, "Member 'FAnimNode_RigidBodyRedCustom::OverrideWorldGravity' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyRedCustom, ExternalForce) == 0x000174, "Member 'FAnimNode_RigidBodyRedCustom::ExternalForce' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyRedCustom, ComponentLinearAccScale) == 0x000180, "Member 'FAnimNode_RigidBodyRedCustom::ComponentLinearAccScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyRedCustom, ComponentLinearVelScale) == 0x00018C, "Member 'FAnimNode_RigidBodyRedCustom::ComponentLinearVelScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyRedCustom, ComponentAppliedLinearAccClamp) == 0x000198, "Member 'FAnimNode_RigidBodyRedCustom::ComponentAppliedLinearAccClamp' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyRedCustom, CachedBoundsScale) == 0x0001A4, "Member 'FAnimNode_RigidBodyRedCustom::CachedBoundsScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyRedCustom, BaseBoneRef) == 0x0001A8, "Member 'FAnimNode_RigidBodyRedCustom::BaseBoneRef' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyRedCustom, OverlapChannel) == 0x0001B8, "Member 'FAnimNode_RigidBodyRedCustom::OverlapChannel' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyRedCustom, SimulationSpace) == 0x0001B9, "Member 'FAnimNode_RigidBodyRedCustom::SimulationSpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyRedCustom, bForceDisableCollisionBetweenConstraintBodies) == 0x0001BA, "Member 'FAnimNode_RigidBodyRedCustom::bForceDisableCollisionBetweenConstraintBodies' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyRedCustom, DeltaSecondsScale) == 0x0001C0, "Member 'FAnimNode_RigidBodyRedCustom::DeltaSecondsScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyRedCustom, SimulationSecondsMax) == 0x0001C4, "Member 'FAnimNode_RigidBodyRedCustom::SimulationSecondsMax' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyRedCustom, IdlingSeconds) == 0x0001C8, "Member 'FAnimNode_RigidBodyRedCustom::IdlingSeconds' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyRedCustom, LimitSimulationTranslate) == 0x0001CC, "Member 'FAnimNode_RigidBodyRedCustom::LimitSimulationTranslate' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyRedCustom, FrameSplitTranslate) == 0x0001D0, "Member 'FAnimNode_RigidBodyRedCustom::FrameSplitTranslate' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyRedCustom, bLengthLock) == 0x0001D4, "Member 'FAnimNode_RigidBodyRedCustom::bLengthLock' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyRedCustom, InterpolateInfo) == 0x0001D8, "Member 'FAnimNode_RigidBodyRedCustom::InterpolateInfo' has a wrong offset!");

// ScriptStruct REDAnimationNode.AnimNode_RigidBodyWithIdling
// 0x0498 (0x0560 - 0x00C8)
struct alignas(0x10) FAnimNode_RigidBodyWithIdling final : public FAnimNode_SkeletalControlBase
{
public:
	class UPhysicsAsset*                          OverridePhysicsAsset;                              // 0x00C8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D0[0x98];                                      // 0x00D0(0x0098)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OverrideWorldGravity;                              // 0x0168(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IdlingSeconds;                                     // 0x0174(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ExternalForce;                                     // 0x0178(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ComponentLinearAccScale;                           // 0x0184(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ComponentLinearVelScale;                           // 0x0190(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ComponentAppliedLinearAccClamp;                    // 0x019C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CachedBoundsScale;                                 // 0x01A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoneReference                         BaseBoneRef;                                       // 0x01AC(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	ECollisionChannel                             OverlapChannel;                                    // 0x01BC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESimulationSpace                              SimulationSpace;                                   // 0x01BD(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceDisableCollisionBetweenConstraintBodies;     // 0x01BE(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BF[0x1];                                      // 0x01BF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bEnableWorldGeometry : 1;                          // 0x01C0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverrideWorldGravity : 1;                         // 0x01C0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bTransferBoneVelocities : 1;                       // 0x01C0(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFreezeIncomingPoseOnStart : 1;                    // 0x01C0(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bClampLinearTranslationLimitToRefPose : 1;         // 0x01C0(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1C1[0x39F];                                    // 0x01C1(0x039F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_RigidBodyWithIdling) == 0x000010, "Wrong alignment on FAnimNode_RigidBodyWithIdling");
static_assert(sizeof(FAnimNode_RigidBodyWithIdling) == 0x000560, "Wrong size on FAnimNode_RigidBodyWithIdling");
static_assert(offsetof(FAnimNode_RigidBodyWithIdling, OverridePhysicsAsset) == 0x0000C8, "Member 'FAnimNode_RigidBodyWithIdling::OverridePhysicsAsset' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithIdling, OverrideWorldGravity) == 0x000168, "Member 'FAnimNode_RigidBodyWithIdling::OverrideWorldGravity' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithIdling, IdlingSeconds) == 0x000174, "Member 'FAnimNode_RigidBodyWithIdling::IdlingSeconds' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithIdling, ExternalForce) == 0x000178, "Member 'FAnimNode_RigidBodyWithIdling::ExternalForce' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithIdling, ComponentLinearAccScale) == 0x000184, "Member 'FAnimNode_RigidBodyWithIdling::ComponentLinearAccScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithIdling, ComponentLinearVelScale) == 0x000190, "Member 'FAnimNode_RigidBodyWithIdling::ComponentLinearVelScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithIdling, ComponentAppliedLinearAccClamp) == 0x00019C, "Member 'FAnimNode_RigidBodyWithIdling::ComponentAppliedLinearAccClamp' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithIdling, CachedBoundsScale) == 0x0001A8, "Member 'FAnimNode_RigidBodyWithIdling::CachedBoundsScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithIdling, BaseBoneRef) == 0x0001AC, "Member 'FAnimNode_RigidBodyWithIdling::BaseBoneRef' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithIdling, OverlapChannel) == 0x0001BC, "Member 'FAnimNode_RigidBodyWithIdling::OverlapChannel' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithIdling, SimulationSpace) == 0x0001BD, "Member 'FAnimNode_RigidBodyWithIdling::SimulationSpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithIdling, bForceDisableCollisionBetweenConstraintBodies) == 0x0001BE, "Member 'FAnimNode_RigidBodyWithIdling::bForceDisableCollisionBetweenConstraintBodies' has a wrong offset!");

}

